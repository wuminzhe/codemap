// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Nodemodule from "node:module";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";
import WebTreeSitter from "web-tree-sitter";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var $$require = Nodemodule.createRequire(import.meta.url);

await WebTreeSitter.init();

function getLanguageName(filename) {
  return Core__Option.flatMap(filename.split(".").pop(), (function (ext) {
                switch (ext) {
                  case "js" :
                      return "javascript";
                  case "py" :
                      return "python";
                  case "rs" :
                      return "rust";
                  case "ts" :
                      return "typescript";
                  default:
                    return ;
                }
              }));
}

async function getLanguage(languageName) {
  var path = $$require.resolve("tree-sitter-wasms/out/tree-sitter-" + languageName + ".wasm");
  try {
    await access(path);
    var language = await WebTreeSitter.Language.load(path);
    return {
            TAG: "Ok",
            _0: language
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      var msg = obj._1.message;
      if (msg !== undefined) {
        return {
                TAG: "Error",
                _0: "Language not found: " + languageName + ", " + msg
              };
      } else {
        return {
                TAG: "Error",
                _0: "Failed to load language: " + languageName
              };
      }
    }
    throw obj;
  }
}

function getScmQuery(languageName) {
  var scmFilename;
  switch (languageName) {
    case "javascript" :
        scmFilename = "javascript.scm";
        break;
    case "python" :
        scmFilename = "python.scm";
        break;
    default:
      throw {
            RE_EXN_ID: "Failure",
            _1: "Unsupported scm query for language " + languageName,
            Error: new Error()
          };
  }
  return Fs.readFileSync(Path.join("src", "queries", scmFilename), "utf-8");
}

function orElse(o, f) {
  if (o !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(o));
  } else {
    return f();
  }
}

function buildParser(language) {
  var parser = new WebTreeSitter();
  parser.setLanguage(language);
  return parser;
}

export {
  $$require ,
  getLanguageName ,
  getLanguage ,
  getScmQuery ,
  orElse ,
  buildParser ,
}
/* require Not a pure module */
